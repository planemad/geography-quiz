{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Map.svelte",
    "Panel.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Map from \"./Map.svelte\";\n  import Panel from \"./Panel.svelte\";\n  import { queryWikidata, rndPlace, shuffle } from \"./utils.js\";\n  import { parse } from \"./wellknown.js\";\n\n  let map;\n  let mapstyle = \"mapbox://styles/planemad/ckgopajx83l581bo6qr5l86yg\";\n  let places;\n\n  let game = {\n    started: false,\n    turn: 0,\n    score: 0,\n    place: null,\n    places: null,\n    message: null,\n  };\n\n  // Get list of countries and associated trivia from Wikidata\n  let sparql = `\n  # List of all countries based on ISO 3166-2 country code with their capitals \n  SELECT DISTINCT ?iso_3166_1 (SAMPLE(?location) as ?location) ?country ?countryLabel ?flag (SAMPLE(?capital) as ?capital) (SAMPLE(?capitalLabel) as ?capitalLabel) (GROUP_CONCAT(DISTINCT ?languageLabel; SEPARATOR=\", \") AS ?languages) WHERE {\n  ?country wdt:P297 ?iso_3166_1. \n  ?country wdt:P625 ?location.\n  OPTIONAL { ?country wdt:P37 ?language }.\n  OPTIONAL { ?country wdt:P41 ?flag }.\n  OPTIONAL { ?country wdt:P36 ?capital }.\n    # Retrieve labels to enable group_concat \n    # https://stackoverflow.com/questions/48855767/group-concat-not-working\n    SERVICE wikibase:label { \n    bd:serviceParam wikibase:language \"en\". \n    ?country rdfs:label ?countryLabel . \n    ?capital rdfs:label ?capitalLabel . \n    ?language rdfs:label ?languageLabel \n  }\n  }\nGROUP BY ?iso_3166_1 ?country ?countryLabel ?flag\nORDER BY ?countryLabel\n`;\n  queryWikidata(sparql).then((result) => {\n    places = result;\n  });\n\n  // New turn. Randomly select a place + get its location\n  function nextTurn() {\n    if (!game.started) {\n      game.started = true;\n    }\n\n    // Get a random place (right answer)\n    let place = rndPlace(places);\n    let countryLocation = parse(place.location.value);\n    game.place = place;\n\n    // Create an array of possible answers\n    game.places = [];\n    game.places.push(place);\n    while (game.places.length < 5) {\n      let place = rndPlace(places);\n      if (!game.places.includes(place)) {\n        game.places.push(place);\n      }\n    }\n    game.places = shuffle(game.places);\n\n    // Get capital location\n    let query = `\n  select ?capitaLocation where {\n    wd:${place.capital.value.replace(\n      \"http://www.wikidata.org/entity/\",\n      \"\"\n    )} wdt:P625 ?capitaLocation.\nservice wikibase:label { bd:serviceParam wikibase:language \"en\". }\n}\n`;\n    queryWikidata(query).then((result) => {\n      // Add a marker for the capital\n      if (result[0].hasOwnProperty(\"capitaLocation\")) {\n        let capitalLocation = parse(result[0].capitaLocation.value);\n        map.getSource(\"capital-location\").setData(capitalLocation);\n      }\n\n      // Update boundary\n      let countryQid = place.country.value.replace(\n        \"http://www.wikidata.org/entity/\",\n        \"\"\n      );\n\n      // Hide country labels\n      map.setLayoutProperty(\"country-label\", \"visibility\", \"none\");\n\n      map.setPaintProperty(\"country-boundaries\", \"fill-color\", [\n        \"match\",\n        [\"get\", \"wikidata_id\"],\n        countryQid,\n        \"hsla(0, 0%, 94%, 0)\",\n        \"hsla(36, 0%, 100%, 0.89)\",\n      ]);\n\n      map.setPaintProperty(\"country-boundaries-outline\", \"line-color\", [\n        \"match\",\n        [\"get\", \"wikidata_id\"],\n        countryQid,\n        \"hsl(33, 0%, 38%)\",\n        \"hsla(0, 0%, 100%, 0)\",\n      ]);\n\n      map.setPaintProperty(\"admin-boundaries-line\", \"line-color\", [\n        \"match\",\n        [\"get\", \"iso_3166_1\"],\n        place.iso_3166_1.value,\n        \"hsl(0, 0%, 100%)\",\n        \"hsl(0, 0%, 60%)\",\n      ]);\n\n      // Pan to place\n      map.easeTo({\n        center: countryLocation.coordinates,\n        zoom: 3,\n        duration: 1000,\n        bearing: Math.random() * 360,\n      });\n\n      // Zoom in after 4 seconds\n      setTimeout(function () {\n        map.easeTo({\n          zoom: 5,\n          duration: 1000,\n        });\n      }, 4000);\n    });\n  }\n\n  // Check if chosen place is correct\n  function checkPlace(code) {\n    // Show country labels\n    map.setLayoutProperty(\"country-label\", \"visibility\", \"visible\");\n\n    if (code == game.place.countryLabel.value) {\n      game.score += 1;\n      game.message = `You got it!`;\n    } else {\n      game.message = `Nope, the answer was ${game.place.countryLabel.value}`;\n    }\n    game.turn += 1;\n    game.place = null;\n    game.places = null;\n  }\n\n  // Retrieve commons thumbnail image from url\n  function commonsImage(filePath, width) {\n    return `${filePath}?width=${width}px`;\n  }\n</script>\n\n<style>\n  :global(body) {\n    margin: 0;\n    padding: 0;\n  }\n  main {\n    padding: 20px;\n  }\n  h1 {\n    margin-top: 1px;\n  }\n  .block {\n    display: block;\n    width: 100%;\n  }\n</style>\n\n<Panel>\n  <main>\n    <h1>Can you guess the country?</h1>\n    <h3>\n      Score\n      {game.score}\n      /\n      {game.turn}\n      {#if game.turn > 0}({Math.round((game.score / game.turn) * 100)}%){/if}\n    </h3>\n    {#if !game.started && places}\n      <button on:click={nextTurn}>Let's get started!</button>\n    {:else if game.places}\n      {#each game.places as place}\n        <button\n          class=\"block\"\n          on:click={checkPlace(place.countryLabel.value)}>{place.countryLabel.value}\n          {#if place.hasOwnProperty('flag')}\n            <img\n              alt=\"Flag of {place.countryLabel.value}\"\n              src={commonsImage(place.flag.value, 30)} />\n          {/if}\n        </button>\n      {/each}\n    {:else if game.message}\n      <h3>{game.message}</h3>\n      <button on:click={nextTurn}>Show me another!</button>\n    {/if}\n  </main>\n</Panel>\n\n<Map style={mapstyle} bind:map />\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import mapbox from \"mapbox-gl\";\n\n  export let location = {\n    bounds: [\n      [-10.76, 49.864],\n      [1.863, 59.479],\n    ], \n  };\n  export let style;\n\n  export let map;\n  let container;\n  let options;\n\n  function resetView() {\n    map.fitBounds(location.bounds);\n  }\n\n  if (location.bounds) {\n    options = { bounds: location.bounds };\n  } else if (location.lon && location.lat) {\n    options = {\n      center: [location.lon, location.lat],\n    };\n    if (location.zoom) {\n      options.zoom = location.zoom;\n    }\n  }\n\n  onMount(() => {\n    const link = document.createElement(\"link\");\n    link.rel = \"stylesheet\";\n    link.href = \"https://unpkg.com/mapbox-gl/dist/mapbox-gl.css\";\n\n    link.onload = () => {\n      mapbox.accessToken =\n        \"pk.eyJ1IjoicGxhbmVtYWQiLCJhIjoiemdYSVVLRSJ9.g3lbg_eN0kztmsfIPxa9MQ\";\n      map = new mapbox.Map({\n        container,\n        style: style,\n        interactive: true,\n        ...options,\n      });\n      // map.scrollZoom.disable();\n\n      map.on(\"load\", function () {\n        loadMapLayers();\n      });\n    };\n\n    document.head.appendChild(link);\n\n    return () => {\n      map.remove();\n      link.parentNode.removeChild(link);\n    };\n  });\n\n  function loadMapLayers() {\n\t  \n\t// Configure the worldview for the country boundaries tileset\n\t// https://docs.mapbox.com/vector-tiles/reference/mapbox-countries-v1/\n\n    const worldviewFilter = [\n      \"all\",\n      [\n        \"any\",\n        [\"in\", \"US\", [\"get\", \"worldview\"]],\n        [\"==\", \"all\", [\"get\", \"worldview\"]]\n\t  ],\n\t  [\"!=\", \"true\", [\"get\", \"disputed\"]]\n    ]; \n\n    map.setFilter(\"country-boundaries\", worldviewFilter);\n    map.setFilter(\"country-boundaries-outline\", worldviewFilter);\n\n    // Add new boundary to the map\n\n    map.addLayer({\n      id: \"capital-location\",\n      type: \"circle\",\n      source: {\n        type: \"geojson\",\n        data: null,\n      },\n      paint: {\n        \"circle-radius\": 3,\n        \"circle-color\": \"hsla(355, 100%, 50%, 0.5)\",\n        \"circle-stroke-color\": \"white\",\n        \"circle-stroke-width\": 1,\n      },\n      layout: {},\n    });\n  }\n</script>\n\n<style>\n  div {\n    width: 60%;\n    height: 100%;\n    position: fixed;\n    right: 0;\n  }\n  @media (max-width: 600px) {\n    div {\n      width: 100%;\n      height: 75%;\n      position: absolute;\n    }\n  }\n</style>\n\n<div bind:this={container}>\n  {#if map}\n    <slot />\n  {/if}\n</div>\n",
    "<style>\n\tdiv {\n\t\tz-index: 2;\n\t\twidth: 40%;\n\t\tposition: absolute;\n\t}\n\t@media (max-width: 600px) {\n\t\tdiv {\n\t\t\twidth: 100%;\n\t\t\ttop: 75%;\n\t\t}\n\t}\n</style>\n\n<div>\n\t<slot></slot>\n</div>"
  ],
  "names": [],
  "mappings": "AA6JU,IAAI,AAAE,CAAC,AACb,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,AACf,CAAC,AACD,EAAE,cAAC,CAAC,AACF,UAAU,CAAE,GAAG,AACjB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,AACb,CAAC;ACvED,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,CAAC,AACV,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CACX,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACH,CAAC;AC9GF,GAAG,eAAC,CAAC,AACJ,OAAO,CAAE,CAAC,CACV,KAAK,CAAE,GAAG,CACV,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,GAAG,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,GAAG,AACT,CAAC,AACF,CAAC"
}