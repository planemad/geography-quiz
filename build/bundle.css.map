{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Map.svelte",
    "Panel.svelte"
  ],
  "sourcesContent": [
    "<!-- \n  How the map quiz works:\n  1. Download a list of countries with an ISO 3166-1 code from Wikidata\n  2. Randomly choose one country for the round\n\n-->\n<script>\n  import Map from \"./Map.svelte\";\n  import Panel from \"./Panel.svelte\";\n  import { queryWikidata, pickCountry, shuffle } from \"./utils.js\";\n  import { parse } from \"./wellknown.js\";\n  import countriesLookup from \"./data/mapbox-countries-v1.json\";\n\n  let map;\n  let mapstyle = \"mapbox://styles/planemad/ckgopajx83l581bo6qr5l86yg\";\n\n  let options = {\n    locale: null,\n    language: \"ta\",\n    fallbackLanguage: \"en\",\n    mapWorldview: \"US\", // Set worldview to use for disputed areas\n    choices: 4,\n  };\n\n  let game = {\n    dataLoaded: false,\n    turn: -1,\n    score: 0,\n    endTurn: false,\n    place: null,\n    choices: null,\n    message: null,\n  };\n\n  let timeout;\n\n  // Customize to user language and location\n  // Use en-US as fallback\n\n  options.locale ? null : detectLocale();\n\n  function detectLocale() {\n    let locale = navigator.language;\n    locale = locale || \"en-US\";\n\n    options.language = locale.split(\"-\")[0];\n\n    if ([\"IN\", \"JP\", \"CN\", \"US\"].indexOf(locale.split(\"-\")[1]) >= 0) {\n      options.mapWorldview = locale.split(\"-\")[1];\n    }\n  }\n\n  // Build a list of Wikidata qids to query from the Mapbox Countries list\n  // Filter by selected worldview and undisputed countries\n  let countriesData = countriesLookup\n    .filter(\n      (d) =>\n        (d.worldview == \"all\" || d.worldview == options.mapWorldview) &&\n        d.disputed == \"FALSE\"\n      // && (d.wikidata_id == \"Q1044\" || d.wikidata_id == \"Q1049\")\n    )\n    .reduce((a, b) => ((a[b.wikidata_id] = b), a), {});\n\n  let countryQids = Object.keys(countriesData);\n\n  // Get list of countries from Wikidata\n  let sparql = `\n  # List of all countries based on ISO 3166-2 country code with their capitals \n  SELECT DISTINCT  (SAMPLE(?location) as ?location) ?country ?countryLabel ?flag (SAMPLE(?capital) as ?capital) (SAMPLE(?capitalLabel) as ?capitalLabel) (GROUP_CONCAT(DISTINCT ?languageLabel; SEPARATOR=\", \") AS ?languages) WHERE {\n  VALUES ?country { ${countryQids.join(\" \").replace(/Q/g, \"wd:Q\")}}\n  OPTIONAL { ?country wdt:P625 ?location }.\n  OPTIONAL { ?country wdt:P37 ?language }.\n  OPTIONAL { ?country wdt:P41 ?flag }.\n  OPTIONAL { ?country wdt:P36 ?capital }.\n    # Retrieve labels to enable group_concat \n    # https://stackoverflow.com/questions/48855767/group-concat-not-working\n    SERVICE wikibase:label { \n    bd:serviceParam wikibase:language \"${options.language},${\n    options.fallbackLanguage\n  }\". \n    ?country rdfs:label ?countryLabel . \n    ?capital rdfs:label ?capitalLabel . \n    ?language rdfs:label ?languageLabel \n  }\n  }\nGROUP BY ?country ?countryLabel ?flag\nORDER BY ?countryLabel\n`;\n  queryWikidata(sparql).then((result) => {\n    // Join the Wikidata results to the country data object using the qid as lookup key\n    result.forEach((d) => {\n      let qid = d.country.value.replace(\"http://www.wikidata.org/entity/\", \"\");\n      Object.assign(countriesData[qid], d);\n      countriesData[qid].wikidata = d;\n      // Augment JSON data from WIkidata results\n      countriesData[qid].name_lang = d.countryLabel.value;\n    });\n\n    if (!game.dataLoaded) {\n      game.dataLoaded = true;\n    }\n  });\n\n  // New turn. Randomly select a place + get its location\n  function nextTurn() {\n    if (game.turn == -1) {\n      game.turn++;\n    }\n\n    game.endTurn = false;\n\n    // Get a random place (right answer)\n    game.correctAnswer = pickCountry(countriesData);\n\n    // Create an array of possible choices in the same subregion and shuffle the order\n    game.choices = [];\n    game.choices.push(game.correctAnswer);\n    while (game.choices.length < options.choices) {\n      let place = pickCountry(\n        countriesData,\n        (d) => d.subregion == game.correctAnswer.subregion\n      );\n\n      if (!game.choices.includes(place)) {\n        game.choices.push(place);\n      }\n    }\n    game.choices = shuffle(game.choices);\n\n    // Add a location marker to the map for the country\n    // Use the location of the capital if available\n    // Else use the country centroid\n\n    if (game.correctAnswer.hasOwnProperty(\"capital\")) {\n      let query = `\n      select (SAMPLE(?capitaLocation) as ?capitaLocation) ?anthemAudio ?coatOfArms (GROUP_CONCAT(DISTINCT ?officialLanguageLabel; SEPARATOR=\", \") AS ?officialLanguageLabels) (GROUP_CONCAT(DISTINCT ?otherLanguageLabel; SEPARATOR=\", \") AS ?otherLanguageLabels) (SAMPLE(?website) AS ?website) where {\n\n        OPTIONAL {  wd:${game.correctAnswer.wikidata_id}  wdt:P85 ?anthem }.\n        OPTIONAL { ?anthem wdt:P51 ?anthemAudio }.\n        \n        OPTIONAL { wd:${game.correctAnswer.wikidata_id} wdt:P94 ?coatOfArms }.\n        OPTIONAL { wd:${game.correctAnswer.wikidata_id} wdt:P856 ?website }.\n        OPTIONAL { wd:${\n          game.correctAnswer.wikidata_id\n        } wdt:P37 ?officialLanguage }.\n    OPTIONAL { wd:${game.correctAnswer.wikidata_id} wdt:P2936 ?otherLanguage }.\n\n        OPTIONAL { \n          wd:${game.correctAnswer.capital.value.replace(\n            \"http://www.wikidata.org/entity/\",\n            \"\"\n          )} wdt:P625 ?capitaLocation }.\n        \n      service wikibase:label { bd:serviceParam wikibase:language \"${\n        options.language\n      },${options.fallbackLanguage}\". }\n      }\n      GROUP BY ?anthemAudio ?coatOfArms\n\n      `;\n      queryWikidata(query).then((result) => {\n        game.correctAnswer.wikidata = Object.assign(\n          result[0],\n          game.correctAnswer.wikidata\n        );\n        // DEBUG\n        // console.log(game.correctAnswer);\n\n        if (result[0].hasOwnProperty(\"capitaLocation\")) {\n          let pointLocation = parse(result[0].capitaLocation.value);\n          map.getSource(\"capital-location\").setData(pointLocation);\n        }\n      });\n    } else {\n      let pointLocation = parse(game.correctAnswer.location.value);\n      map.getSource(\"capital-location\").setData(pointLocation);\n    }\n\n    // Update boundary\n    let countryQid = game.correctAnswer.country.value.replace(\n      \"http://www.wikidata.org/entity/\",\n      \"\"\n    );\n\n    // Hide country labels\n    map.setLayoutProperty(\"country-label\", \"visibility\", \"none\");\n\n    map.setPaintProperty(\"country-boundaries\", \"fill-color\", [\n      \"match\",\n      [\"get\", \"wikidata_id\"],\n      countryQid,\n      \"hsla(0, 0%, 94%, 0)\",\n      \"hsla(36, 0%, 100%, 0.89)\",\n    ]);\n\n    map.setPaintProperty(\"country-boundaries-outline\", \"line-color\", [\n      \"match\",\n      [\"get\", \"wikidata_id\"],\n      countryQid,\n      \"hsl(33, 0%, 38%)\",\n      \"hsla(0, 0%, 100%, 0)\",\n    ]);\n\n    map.setPaintProperty(\"admin-boundaries-line\", \"line-color\", [\n      \"match\",\n      [\"get\", \"iso_3166_1\"],\n      game.correctAnswer.iso_3166_1,\n      \"hsl(0, 0%, 100%)\",\n      \"hsl(0, 0%, 60%)\",\n    ]);\n\n    clearTimeout(timeout);\n\n    // Pan to place\n    map.easeTo({\n      center: JSON.parse(game.correctAnswer.centroid),\n      zoom: 3,\n      duration: 1000,\n      bearing: Math.random() * 360,\n    });\n\n    // Zoom in after 4 seconds\n    timeout = setTimeout(function () {\n      map.easeTo({\n        zoom: 5,\n        duration: 1000,\n      });\n    }, 4000);\n  }\n\n  // Check if chosen place is correct\n  function checkAnswer(code) {\n    game.endTurn = true;\n\n    // Show country labels\n    map.easeTo({\n      zoom: 3,\n      bearing: 0,\n      duration: 1000,\n    });\n    map.setLayoutProperty(\"country-label\", \"visibility\", \"visible\");\n\n    if (code == game.correctAnswer.countryLabel.value) {\n      game.score += 1;\n      game.message = `ðŸ™Œ You got it!`;\n    } else {\n      game.message = `ðŸ™ˆ Nope!`;\n    }\n    game.turn += 1;\n    game.choices = null;\n  }\n\n  // Retrieve commons thumbnail image from url\n  function commonsImage(filePath, width) {\n    return `${filePath}?width=${width}px`;\n  }\n</script>\n\n<style>\n  :global(body) {\n    margin: 0;\n    padding: 0;\n  }\n  main {\n    padding: 20px;\n  }\n  h1 {\n    margin-top: 1px;\n  }\n  .block {\n    display: block;\n    width: 100%;\n  }\n  footer {\n    position: absolute;\n    bottom: 10px;\n  }\n  #info {\n    padding: 20px;\n    background-color: #eaeaea;\n  }\n  #info img {\n    width: 50%;\n    max-width: 150;\n  }\n</style>\n\n<Panel>\n  <main>\n    <h1>Can you guess the country?</h1>\n    {#if game.dataLoaded && game.turn == -1}\n      <button on:click={nextTurn}>Let's get started!</button>\n    {:else if game.choices}\n      <h3>\n        Score\n        {game.score}\n        /\n        {game.turn}\n        {#if game.turn > 0}({Math.round((game.score / game.turn) * 100)}%){/if}\n      </h3>\n\n      {#each game.choices as place}\n        <button\n          class=\"block\"\n          on:click={checkAnswer(place.countryLabel.value)}>{place.countryLabel.value}\n          {#if place.hasOwnProperty('flag')}\n            <img\n              alt=\"Flag of {place.countryLabel.value}\"\n              src={commonsImage(place.flag.value, 30)} />\n          {/if}\n        </button>\n      {/each}\n    {:else if game.message}\n      <h3>{game.message}</h3>\n      <button on:click={nextTurn}>Show me another!</button>\n\n      <div id=\"info\">\n        <h1>\n          {game.correctAnswer.name}\n          {#if game.correctAnswer.name_lang != game.correctAnswer.name}\n            <br /><small>{game.correctAnswer.name_lang}</small>\n          {/if}\n        </h1>\n        {#if game.correctAnswer.wikidata.hasOwnProperty('flag')}\n          <img\n            alt=\"Flag of {game.correctAnswer.wikidata.countryLabel.value}\"\n            src={commonsImage(game.correctAnswer.wikidata.flag.value, 150)} />\n        {/if}\n        {#if game.correctAnswer.wikidata.hasOwnProperty('coatOfArms')}\n          <img\n            alt=\"Coat of arms of {game.correctAnswer.wikidata.countryLabel.value}\"\n            src={commonsImage(game.correctAnswer.wikidata.coatOfArms.value, 150)} />\n        {/if}\n        <ul>\n          <li>\n            Capital:\n            {#if game.correctAnswer.wikidata.hasOwnProperty('capitalLabel')}\n              {game.correctAnswer.wikidata.capitalLabel.value}\n            {:else}None{/if}\n          </li>\n          <li>\n            Languages :\n            {#if game.correctAnswer.wikidata.hasOwnProperty('languages')}\n              {game.correctAnswer.wikidata.languages.value}\n            {:else}Unknown{/if}\n          </li>\n          <li>\n            Official homepage :\n            {#if game.correctAnswer.wikidata.hasOwnProperty('website')}\n            <a href=\"{game.correctAnswer.wikidata.website.value}\">{game.correctAnswer.wikidata.website.value}</a>\n            {:else}Unknown{/if}\n          </li>\n        </ul>\n        Source:\n        <a href=\"{game.correctAnswer.wikidata.country.value}\">Wikidata</a>\n      </div>\n    {/if}\n    <footer>\n      <a href=\"https://github.com/planemad/map-quiz/tree/main\">Source Code</a>\n    </footer>\n  </main>\n</Panel>\n\n<Map style={mapstyle} worldview={options.mapWorldview} bind:map />\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import mapbox from \"mapbox-gl\";\n\n  // Worldview for disputed areas. \n  // https://docs.mapbox.com/vector-tiles/reference/mapbox-boundaries-v3/#--polygon---worldview-text\n  export let worldview = \"US\";\n\n  // Initial map location\n  export let location = {\n    bounds: [\n      [-10.76, 49.864],\n      [1.863, 59.479],\n    ], \n  };\n  export let style;\n\n  export let map;\n  let container;\n  let options;\n\n  function resetView() {\n    map.fitBounds(location.bounds);\n  }\n\n  if (location.bounds) {\n    options = { bounds: location.bounds };\n  }\n\n  onMount(() => {\n    const link = document.createElement(\"link\");\n    link.rel = \"stylesheet\";\n    link.href = \"https://unpkg.com/mapbox-gl/dist/mapbox-gl.css\";\n\n    link.onload = () => {\n      mapbox.accessToken =\n        \"pk.eyJ1IjoicGxhbmVtYWQiLCJhIjoiemdYSVVLRSJ9.g3lbg_eN0kztmsfIPxa9MQ\";\n      map = new mapbox.Map({\n        container,\n        style: style,\n        interactive: true,\n        ...options,\n      });\n      // map.scrollZoom.disable();\n\n      map.on(\"load\", function () {\n        loadMapLayers();\n      });\n    };\n\n    document.head.appendChild(link);\n\n    return () => {\n      map.remove();\n      link.parentNode.removeChild(link);\n    };\n  });\n\n  function loadMapLayers() {\n\t  \n\t// Configure the worldview for the country boundaries tileset\n\t// https://docs.mapbox.com/vector-tiles/reference/mapbox-countries-v1/\n\n    const worldviewFilter = [\n      \"all\",\n      [\n        \"any\",\n        [\"in\", worldview, [\"get\", \"worldview\"]],\n        [\"==\", \"all\", [\"get\", \"worldview\"]]\n\t  ],\n\t  [\"!=\", \"true\", [\"get\", \"disputed\"]]\n    ]; \n\n    map.setFilter(\"country-boundaries\", worldviewFilter);\n    map.setFilter(\"country-boundaries-outline\", worldviewFilter);\n\n    // Add new boundary to the map\n\n    map.addLayer({\n      id: \"capital-location\",\n      type: \"circle\",\n      source: {\n        type: \"geojson\",\n        data: null,\n      },\n      paint: {\n        \"circle-radius\": 3,\n        \"circle-color\": \"hsla(355, 100%, 50%, 0.5)\",\n        \"circle-stroke-color\": \"white\",\n        \"circle-stroke-width\": 1,\n      },\n      layout: {},\n    });\n  }\n</script>\n\n<style>\n  div {\n    width: 60%;\n    height: 100%;\n    position: fixed;\n    right: 0;\n  }\n  @media (max-width: 600px) {\n    div {\n      width: 100%;\n      height: 75%;\n      position: absolute;\n    }\n  }\n</style>\n\n<div bind:this={container}>\n  {#if map}\n    <slot />\n  {/if}\n</div>\n",
    "<style>\n\tdiv {\n\t\tz-index: 2;\n\t\twidth: 40%;\n\t\theight: 100vh;\n\t\tposition: absolute;\n\t}\n\t@media (max-width: 600px) {\n\t\tdiv {\n\t\t\twidth: 100%;\n\t\t\ttop: 75%;\n\t\t}\n\t}\n\n</style>\n\n<div>\n\t<slot></slot>\n</div>"
  ],
  "names": [],
  "mappings": "AAmQU,IAAI,AAAE,CAAC,AACb,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,IAAI,4BAAC,CAAC,AACJ,OAAO,CAAE,IAAI,AACf,CAAC,AACD,EAAE,4BAAC,CAAC,AACF,UAAU,CAAE,GAAG,AACjB,CAAC,AACD,MAAM,4BAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,AACb,CAAC,AACD,MAAM,4BAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,AACd,CAAC,AACD,KAAK,4BAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AACD,mBAAK,CAAC,GAAG,cAAC,CAAC,AACT,KAAK,CAAE,GAAG,CACV,SAAS,CAAE,GAAG,AAChB,CAAC;AC3LD,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,CAAC,AACV,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CACX,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACH,CAAC;AC5GF,GAAG,eAAC,CAAC,AACJ,OAAO,CAAE,CAAC,CACV,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,GAAG,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,GAAG,AACT,CAAC,AACF,CAAC"
}