{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Map.svelte",
    "Panel.svelte"
  ],
  "sourcesContent": [
    "<!-- \n  How the map quiz works:\n  1. Download a list of countries with an ISO 3166-1 code from Wikidata\n  2. Randomly choose one country for the round\n\n-->\n<script>\n  import Map from \"./Map.svelte\";\n  import Panel from \"./Panel.svelte\";\n  import { queryWikidata, pickCountry, shuffle } from \"./utils.js\";\n  import { parse } from \"./wellknown.js\";\n  import countriesLookup from \"./data/mapbox-countries-v1.json\";\n\n  let map = null;\n\n  let options = {\n    locale: navigator.language,\n    language: \"ta\",\n    fallbackLanguage: \"en\",\n    mapWorldview: \"US\", // Set worldview to use for disputed areas\n    mapStyle: \"mapbox://styles/planemad/ckgopajx83l581bo6qr5l86yg\",\n    choices: 4,\n    viewportWidth: window.innerWidth,\n  };\n\n  let game = {\n    difficultyLevel: 1, // 1,2,3\n    difficultyLevels: [\n      {\n        message:\n          \"You have been looking at maps since you were born, am sure you can do this 🤓\",\n      },\n      { message: \"😅\" },\n      { message: \"🤨\" },\n      { message: \"🙈\" },\n    ],\n    dataLoaded: false,\n    showIntro: true,\n    turn: 0,\n    score: 0,\n    endTurn: false,\n    place: null,\n    choices: null,\n    answerIsCorrect: null,\n  };\n\n  let timeout;\n\n  // Customize to user language and location\n  // Use English as fallback\n\n  if (options.locale.split(\"-\").length == 1) detectLocation();\n\n  function detectLocation() {\n    // Detect user country\n    fetch(\"https://freegeoip.app/json/\")\n      .then((res) => res.json())\n      .then((d) => {\n        options.locale += \"-\" + d.country_code;\n        customizeLocale();\n      })\n      .catch(() => null);\n  }\n\n  customizeLocale();\n\n  function customizeLocale() {\n    console.log(\"Detected locale\", options.locale);\n    options.language = options.locale.split(\"-\")[0];\n    if ([\"IN\", \"JP\", \"CN\", \"US\"].indexOf(options.locale.split(\"-\")[1]) >= 0) {\n      options.mapWorldview = options.locale.split(\"-\")[1];\n    }\n  }\n\n  // Build a list of Wikidata qids to query from the Mapbox Countries list\n  // Filter by selected worldview and undisputed countries\n  let countriesData = countriesLookup\n    .filter(\n      (d) =>\n        (d.worldview == \"all\" || d.worldview == options.mapWorldview) &&\n        d.disputed == \"FALSE\"\n      // && (d.wikidata_id == \"Q1044\" || d.wikidata_id == \"Q1049\")\n    )\n    .reduce((a, b) => ((a[b.wikidata_id] = b), a), {});\n\n  let countryQids = Object.keys(countriesData);\n\n  // Get list of countries from Wikidata\n  let sparql = `\n  # List of all countries based on ISO 3166-2 country code with their capitals \n  SELECT DISTINCT  (SAMPLE(?location) as ?location) ?country ?countryLabel (SAMPLE(?capital) as ?capital) (SAMPLE(?capitalLabel) as ?capitalLabel) (SAMPLE(?flag) as ?flag) WHERE {\n  VALUES ?country { ${countryQids.join(\" \").replace(/Q/g, \"wd:Q\")}}\n  OPTIONAL { ?country wdt:P625 ?location }.\n  OPTIONAL { ?country wdt:P41 ?flag }.\n  OPTIONAL { ?country wdt:P36 ?capital }.\n    # Retrieve labels to enable group_concat \n    # https://stackoverflow.com/questions/48855767/group-concat-not-working\n    SERVICE wikibase:label {\n    bd:serviceParam wikibase:language \"${options.language},${\n    options.fallbackLanguage\n  }\". \n    ?country rdfs:label ?countryLabel . \n    ?capital rdfs:label ?capitalLabel . \n  }\n  }\nGROUP BY ?country ?countryLabel\nORDER BY ?countryLabel\n`;\n  queryWikidata(sparql).then((result) => {\n    // Join the Wikidata results to the country data object using the qid as lookup key\n    result.forEach((d) => {\n      let qid = d.country.value.replace(\"http://www.wikidata.org/entity/\", \"\");\n      Object.assign(countriesData[qid], d);\n      countriesData[qid].wikidata = d;\n      // Augment JSON data from WIkidata results\n      countriesData[qid].name_lang = d.countryLabel.value;\n    });\n\n    if (!game.dataLoaded) {\n      game.dataLoaded = true;\n\n      // setTimeout(function(){\n      //   map.on(\"load\", function () {\n      //   nextTurn();\n      // });\n      // }, 1000);\n    }\n  });\n\n  // New turn. Randomly select a place + get its location\n  function nextTurn() {\n    game.endTurn = false;\n\n    map.setPaintProperty(\"country-boundaries\", \"fill-opacity\", 0);\n\n    // Get a random place (right answer)\n    game.correctAnswer = pickCountry(countriesData);\n\n    // Create an array of possible choices in the same subregion and shuffle the order\n    game.choices = [];\n    game.choices.push(game.correctAnswer);\n    while (game.choices.length < options.choices) {\n      let place = pickCountry(\n        countriesData,\n        (d) => d.subregion == game.correctAnswer.subregion\n      );\n\n      // Dont add choice if it already exists\n      if (\n        !game.choices.filter((d) => d.wikidata_id == place.wikidata_id).length\n      ) {\n        game.choices.push(place);\n      }\n    }\n    game.choices = shuffle(game.choices);\n\n    // Add a location marker to the map for the country\n    // Use the location of the capital if available\n    // Else use the country centroid\n\n    let hasCapital = game.correctAnswer.hasOwnProperty(\"capital\");\n\n    let query = `\n      select ${\n        hasCapital ? \"(SAMPLE(?capitalLocation) as ?capitalLocation)\" : \"\"\n      } ?anthemLabel ?anthemAudio ?coatOfArms (GROUP_CONCAT(DISTINCT ?officialLanguageLabel; SEPARATOR=\", \") AS ?officialLanguageLabels) (GROUP_CONCAT(DISTINCT ?otherLanguageLabel; SEPARATOR=\", \") AS ?otherLanguageLabels) (SAMPLE(?website) AS ?website)  (SAMPLE(?namedAfter) as ?namedAfter) (SAMPLE(?pageBanner) as ?pageBanner) (SAMPLE(?pronounciationAudio) as ?pronounciationAudio) where {\n\n        OPTIONAL {  wd:${game.correctAnswer.wikidata_id}  wdt:P85 ?anthem }.\n        OPTIONAL { ?anthem wdt:P51 ?anthemAudio }.\n        \n        OPTIONAL { wd:${game.correctAnswer.wikidata_id} wdt:P94 ?coatOfArms }.\n        OPTIONAL { wd:${game.correctAnswer.wikidata_id} wdt:P856 ?website }.\n        OPTIONAL { wd:${game.correctAnswer.wikidata_id} wdt:P138 ?namedAfter}.\n        OPTIONAL { wd:${game.correctAnswer.wikidata_id} wdt:P948 ?pageBanner}.\n        OPTIONAL { wd:${\n          game.correctAnswer.wikidata_id\n        } wdt:P443 ?pronounciationAudio}.\n        OPTIONAL { wd:${\n          game.correctAnswer.wikidata_id\n        } wdt:P37 ?officialLanguage }.\n        OPTIONAL { wd:${\n          game.correctAnswer.wikidata_id\n        } wdt:P2936 ?otherLanguage }.\n\n        ${\n          hasCapital\n            ? `OPTIONAL { \n          wd:${game.correctAnswer.capital.value.replace(\n            \"http://www.wikidata.org/entity/\",\n            \"\"\n          )} wdt:P625 ?capitalLocation }.`\n            : \"\"\n        }\n        \n      service wikibase:label { bd:serviceParam wikibase:language \"${\n        options.language\n      },${options.fallbackLanguage}\". \n      ?officialLanguage rdfs:label ?officialLanguageLabel .\n   ?otherLanguage rdfs:label ?otherLanguageLabel .\n   ?anthem rdfs:label ?anthemLabel .\n  }\n      }\n      GROUP BY ?anthemLabel ?anthemAudio ?coatOfArms\n\n      `;\n\n    queryWikidata(query).then((result) => {\n      game.correctAnswer.wikidata = Object.assign(\n        result[0],\n        game.correctAnswer.wikidata\n      );\n      // DEBUG: Inspect answer data\n      // console.log(query, countriesData, game.correctAnswer);\n\n      let pointLocation;\n\n      if (result[0].hasOwnProperty(\"capitalLocation\")) {\n        pointLocation = parse(\n          game.correctAnswer.wikidata.capitalLocation.value\n        );\n      } else {\n        pointLocation = game.correctAnswer.centroid;\n      }\n      map.getSource(\"capital-location\").setData(pointLocation);\n    });\n\n    // Update boundary\n\n    styleMap(game.correctAnswer.iso_3166_1);\n\n    // Pan to place\n\n    map.fitBounds(JSON.parse(game.correctAnswer.bounds), {\n      padding: document.getElementById(\"map\").offsetWidth * 0.1,\n      duration: 1000,\n      bearing: Math.random() * 360,\n      maxZoom: 9,\n    });\n\n    map.setPaintProperty(\"country-boundaries\", \"fill-opacity\", 1);\n\n    // Zoom in after 4 seconds\n    timeout = setTimeout(function () {\n      map.easeTo({\n        center: JSON.parse(game.correctAnswer.centroid),\n        zoom: map.getZoom() < 5 ? map.getZoom() : 5,\n        duration: 6000,\n      });\n    }, 1000);\n  }\n\n  // Style the map to highlight a country\n  function styleMap(iso_3166_1, mode) {\n    // Hide country labels\n    map.setLayoutProperty(\"country-label\", \"visibility\", \"none\");\n    map.setLayoutProperty(\"settlement-minor-label\", \"visibility\", \"none\");\n    map.setLayoutProperty(\"settlement-major-label\", \"visibility\", \"none\");\n\n    // Mask country boundary\n    map.setPaintProperty(\"country-boundaries\", \"fill-color\", [\n      \"case\",\n      [\"match\", [\"get\", \"iso_3166_1\"], [iso_3166_1], true, false],\n      \"hsla(0, 0%, 94%, 0)\",\n      [\"match\", [\"get\", \"disputed\"], [\"true\"], true, false],\n      \"hsla(36, 0%, 10%, 0.05)\",\n      \"hsla(36, 0%, 100%, 0.89)\",\n    ]);\n\n    // Style country outline and internal boundaries\n    map.setPaintProperty(\"country-boundaries-outline\", \"line-color\", [\n      \"match\",\n      [\"get\", \"iso_3166_1\"],\n      iso_3166_1,\n      \"orange\",\n      \"hsla(0, 0%, 100%, 0)\",\n    ]);\n\n    map.setPaintProperty(\"admin-boundaries-line\", \"line-color\", [\n      \"case\",\n      [\"match\", [\"get\", \"iso_3166_1\"], [iso_3166_1], true, false],\n      \"hsl(0, 0%, 100%)\",\n      [\"match\", [\"get\", \"disputed\"], [\"true\"], true, false],\n      \"hsl(0, 0%, 82%)\",\n      \"hsl(0, 0%, 66%)\",\n    ]);\n\n    map.setLayoutProperty(\"country-label\", \"symbol-sort-key\", [\n      \"match\",\n      [\"get\", \"iso_3166_1\"],\n      iso_3166_1,\n      0,\n      1,\n    ]);\n\n    map.setLayoutProperty(\"settlement-minor-label\", \"symbol-sort-key\", [\n      \"match\",\n      [\"get\", \"iso_3166_1\"],\n      iso_3166_1,\n      0,\n      1,\n    ]);\n\n    // Highlight matching country and city labels\n    map.setPaintProperty(\"country-label\", \"text-opacity\", [\n      \"match\",\n      [\"get\", \"iso_3166_1\"],\n      iso_3166_1,\n      1,\n      0.3,\n    ]);\n    map.setPaintProperty(\"settlement-minor-label\", \"text-opacity\", [\n      \"match\",\n      [\"get\", \"iso_3166_1\"],\n      iso_3166_1,\n      1,\n      0.2,\n    ]);\n    map.setPaintProperty(\"settlement-major-label\", \"text-opacity\", [\n      \"match\",\n      [\"get\", \"iso_3166_1\"],\n      iso_3166_1,\n      1,\n      0.2,\n    ]);\n    map.setPaintProperty(\"settlement-minor-label\", \"icon-opacity\", [\n      \"match\",\n      [\"get\", \"iso_3166_1\"],\n      iso_3166_1,\n      1,\n      0.1,\n    ]);\n    map.setPaintProperty(\"settlement-major-label\", \"icon-opacity\", [\n      \"match\",\n      [\"get\", \"iso_3166_1\"],\n      iso_3166_1,\n      1,\n      0.1,\n    ]);\n  }\n\n  // Check if chosen place is correct\n  function checkAnswer(code) {\n    game.endTurn = true;\n\n    // Show country labels\n    map.easeTo({\n      zoom: 3,\n      bearing: 0,\n      duration: 1000,\n    });\n    map.setLayoutProperty(\"country-label\", \"visibility\", \"visible\");\n    map.setLayoutProperty(\"settlement-minor-label\", \"visibility\", \"visible\");\n    map.setLayoutProperty(\"settlement-major-label\", \"visibility\", \"visible\");\n\n    if (code == game.correctAnswer.countryLabel.value) {\n      game.score += 1;\n      game.answerIsCorrect = true;\n    } else {\n      game.answerIsCorrect = false;\n    }\n\n    game.turn += 1;\n    game.choices = null;\n  }\n\n  // Retrieve commons thumbnail image from url\n  function commonsImage(filePath, width) {\n    return `${filePath}?width=${width}px`;\n  }\n\n  function removeIntro() {\n    game.showIntro = false;\n    nextTurn();\n  }\n</script>\n\n<style>\n  .flag {\n    border: 1px solid #eaeaea;\n  }\n</style>\n\n<Panel>\n  <main id=\"panel\" class=\"uk-position-absolute uk-padding-small uk-width-1-1\">\n    {#if game.showIntro}\n      {#if !game.dataLoaded}\n        <h4>\n          <div uk-spinner />\n          Loading list of countries.\n        </h4>\n      {:else}\n        <div>\n          <h1>Can you guess the country?</h1>\n          <button\n            on:click={removeIntro}\n            class=\"uk-button uk-button-primary uk-button-large uk-width-1-1\"\n            style=\"background-color:#1ba3e3\">\n            Let's get started!<br />\n          </button>\n        </div>\n      {/if}\n    {:else if game.choices}\n      <h4>\n        Indentify this country in\n        {game.correctAnswer.subregion}\n        ({game.correctAnswer.region}):\n      </h4>\n      <div class=\"uk-child-width-expand uk-grid-small uk-grid-match\" uk-grid>\n        {#each game.choices as choice}\n          <div\n            class=\"uk-width-1-1\"\n            on:click={checkAnswer(choice.countryLabel.value)}>\n            <div\n              data-qid={choice.wikidata_id}\n              class=\"uk-card uk-card-default uk-card-body uk-card-hover\">\n              {choice.countryLabel.value}\n\n              {#if choice.hasOwnProperty('flag')}\n                <img\n                  class=\"uk-float-right flag\"\n                  alt=\"Flag of {choice.countryLabel.value}\"\n                  src={commonsImage(choice.flag.value, 50)} />\n              {/if}\n            </div>\n          </div>\n        {/each}\n      </div>\n      <p>\n        Score\n        {game.score}\n        /\n        {game.turn}\n        {#if game.turn > 0}({Math.round((game.score / game.turn) * 100)}%){/if}\n        <progress class=\"uk-progress\" value={game.score} max={game.turn} />\n      </p>\n    {:else if game.endTurn}\n      {#if game.answerIsCorrect}\n        <div class=\"uk-margin-remove\" uk-alert>\n          <h3>{game.correctAnswer.name_lang} is <b>correct</b>!</h3>\n          <p>\n            Score\n            {game.score}\n            /\n            {game.turn}\n            {#if game.turn > 0}\n              ({Math.round((game.score / game.turn) * 100)}%)\n            {/if}\n            <progress class=\"uk-progress\" value={game.score} max={game.turn} />\n          </p>\n        </div>\n      {:else}\n        <div class=\"uk-margin-remove\" uk-alert>\n          <h3>Sorry, it was {game.correctAnswer.name_lang}.</h3>\n          <p>\n            Score\n            {game.score}\n            /\n            {game.turn}\n            {#if game.turn > 0}\n              ({Math.round((game.score / game.turn) * 100)}%)\n            {/if}\n            <progress\n              class=\"uk-progress\"\n              value={game.score}\n              max={game.turn}\n              style=\"background-color:red\" />\n          </p>\n        </div>\n      {/if}\n      <button\n        on:click={nextTurn}\n        class=\"uk-button uk-button-primary uk-button-large uk-width-1-1\"\n        style=\"background-color:#1ba3e3\">\n        Try another country\n        <br />\n      </button>\n\n      <div class=\"uk-card uk-card-default uk-margin-top\">\n        <div class=\"uk-card-header\">\n          <div class=\"uk-grid-small uk-flex-middle\" uk-grid>\n            <div class=\"uk-width-auto\">\n              {#if game.correctAnswer.wikidata.hasOwnProperty('flag')}\n                <a href={game.correctAnswer.wikidata.flag.value}>\n                  <img\n                    alt=\"Flag of {game.correctAnswer.wikidata.countryLabel.value}\"\n                    src=\"{game.correctAnswer.wikidata.flag.value}?width=100px\"\n                    class=\"flag\" />\n                </a>\n              {/if}\n            </div>\n            <div class=\"uk-width-expand\">\n              <h3 class=\"uk-card-title uk-margin-remove-bottom\">\n                {game.correctAnswer.name_lang}\n              </h3>\n\n              {#if game.correctAnswer.name_lang != game.correctAnswer.name}\n                <p class=\"uk-text-meta uk-margin-remove-top\">\n                  {game.correctAnswer.name}\n                </p>\n              {/if}\n              {#if game.correctAnswer.wikidata.hasOwnProperty('website')}\n                <a\n                  href={game.correctAnswer.wikidata.website.value}>{game.correctAnswer.wikidata.website.value}</a>\n              {/if}\n            </div>\n          </div>\n        </div>\n\n        {#if game.correctAnswer.wikidata.hasOwnProperty('pageBanner')}\n          <div class=\"uk-card-media-top\">\n            <img\n              alt=\"Header image of {game.correctAnswer.wikidata.countryLabel.value}\"\n              src=\"{game.correctAnswer.wikidata.pageBanner.value}?width={document.getElementById('panel').offsetWidth}px\" />\n          </div>\n        {/if}\n\n        <div class=\"uk-card-body\">\n          <p>\n            {#if game.correctAnswer.wikidata.hasOwnProperty('coatOfArms')}\n              <a href={game.correctAnswer.wikidata.coatOfArms.value}>\n                <img\n                  alt=\"Coat of arms of {game.correctAnswer.wikidata.countryLabel.value}\"\n                  src=\"{game.correctAnswer.wikidata.coatOfArms.value}?width=150px\" />\n              </a>\n              Coat of arms\n            {/if}\n          </p>\n\n          <ul class=\"uk-list\">\n            <!-- {#if game.correctAnswer.wikidata.hasOwnProperty('namedAfter')}\n              <li>\n                Country named after:\n                {game.correctAnswer.wikidata.namedAfter.value}\n              </li>\n            {/if} -->\n\n            <!-- Skip ogg audio for Safari since it is unsupported -->\n            {#if !/^((?!chrome|android).)*safari/i.test(navigator.userAgent)}\n              {#if game.correctAnswer.wikidata.hasOwnProperty('pronounciationAudio')}\n                <li>\n                  Native pronounciation\n                  <audio controls>\n                    <source\n                      type=\"audio/ogg\"\n                      src={game.correctAnswer.wikidata.pronounciationAudio.value.replace('http:', 'https:')} />\n                  </audio>\n                </li>\n              {/if}\n\n              {#if game.correctAnswer.wikidata.hasOwnProperty('anthemAudio')}\n                <li>\n                  Anthem:\n                  {game.correctAnswer.wikidata.anthemLabel.value}\n                  <audio controls>\n                    <source\n                      type=\"audio/ogg\"\n                      src={game.correctAnswer.wikidata.anthemAudio.value.replace('http:', 'https:')} />\n                  </audio>\n                </li>\n              {/if}\n            {/if}\n\n            <li>\n              Capital:\n              {#if game.correctAnswer.wikidata.hasOwnProperty('capitalLabel')}\n                {game.correctAnswer.wikidata.capitalLabel.value}\n              {:else}None{/if}\n            </li>\n          </ul>\n          <h4>Languages</h4>\n          <ul class=\"uk-list\">\n            <li>\n              Official:\n              {#if game.correctAnswer.wikidata.hasOwnProperty('officialLanguageLabels')}\n                {game.correctAnswer.wikidata.officialLanguageLabels.value}\n              {:else}Unknown{/if}\n            </li>\n            <li>\n              Other:\n              {#if game.correctAnswer.wikidata.hasOwnProperty('otherLanguageLabels')}\n                {game.correctAnswer.wikidata.otherLanguageLabels.value}\n              {:else}Unknown{/if}\n            </li>\n          </ul>\n        </div>\n        <div class=\"uk-card-footer\">\n          Data source:\n          <a\n            href={game.correctAnswer.wikidata.country.value}\n            class=\"uk-button uk-button-text\">Wikidata</a>\n        </div>\n      </div>\n    {/if}\n    <footer class=\"uk-margin-top\">\n      <small>❤️ Built with\n        <a href=\"https://docs.mapbox.com/mapbox-gl-js/api/\">Mapbox</a>,\n        <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a>,\n        <a href=\"https://www.wikidata.org/wiki/Wikidata:Main_Page\">Wikidata</a>\n        and\n        <a href=\"https://svelte.dev/\">Svelte</a>\n        |\n        <a href=\"https://github.com/planemad/map-quiz/tree/main\">Source code</a></small>\n    </footer>\n  </main>\n</Panel>\n\n<Map\n  style={options.mapStyle}\n  worldview={options.mapWorldview}\n  locale={options.locale}\n  difficultyLevel={options.difficultyLevel}\n  location={{ bounds: JSON.parse(countriesData.Q142.bounds) }}\n  bind:map />\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import mapbox from \"mapbox-gl\";\n\n  // Worldview for disputed areas.\n  // https://docs.mapbox.com/vector-tiles/reference/mapbox-boundaries-v3/#--polygon---worldview-text\n  export let worldview = \"US\";\n\n  // Initial map location\n  export let location = {\n    bounds: [\n      [-10.76, 49.864],\n      [1.863, 59.479],\n    ],\n  };\n  export let style;\n  export let map;\n  export let locale;\n\n  let container;\n  let options;\n\n  function resetView() {\n    map.fitBounds(location.bounds);\n  }\n\n  if (location.bounds) {\n    options = { bounds: location.bounds };\n  }\n\n  onMount(() => {\n    const link = document.createElement(\"link\");\n    link.rel = \"stylesheet\";\n    link.href = \"https://unpkg.com/mapbox-gl/dist/mapbox-gl.css\";\n\n    link.onload = () => {\n      mapbox.accessToken =\n        \"pk.eyJ1IjoicGxhbmVtYWQiLCJhIjoiemdYSVVLRSJ9.g3lbg_eN0kztmsfIPxa9MQ\";\n      map = new mapbox.Map({\n        container,\n        style: style,\n        interactive: true,\n        ...options,\n      });\n      // map.scrollZoom.disable();\n\n      var nav = new mapbox.NavigationControl();\n      map.addControl(nav, \"top-right\");\n\n      var scale = new mapbox.ScaleControl({\n        maxWidth: 80,\n      });\n      map.addControl(scale, \"bottom-right\");\n\n      map.on(\"load\", function () {\n        loadMapLayers();\n      });\n    };\n\n    document.head.appendChild(link);\n\n    return () => {\n      map.remove();\n      link.parentNode.removeChild(link);\n    };\n  });\n\n  function loadMapLayers() {\n    // Configure the worldview for the country boundaries tileset\n    // https://docs.mapbox.com/vector-tiles/reference/mapbox-countries-v1/\n\n    const worldviewFilter = [\n      \"all\",\n      [\n        \"any\",\n        [\"in\", worldview, [\"get\", \"worldview\"]],\n        [\"==\", \"all\", [\"get\", \"worldview\"]],\n      ],\n    ];\n\n    map.setFilter(\"country-boundaries\", worldviewFilter);\n    map.setFilter(\"country-boundaries-outline\", worldviewFilter);\n    map.setFilter(\"admin-boundaries-line\", worldviewFilter);\n\n    // Set language of labels if supported\n    // https://docs.mapbox.com/vector-tiles/reference/mapbox-streets-v8/#name-text--name_lang-code-text\n    let supportedMapLanguages = [\n      \"ar\",\n      \"en\",\n      \"es\",\n      \"fr\",\n      \"de\",\n      \"it\",\n      \"pt\",\n      \"ru\",\n      \"zh-Hans\",\n      \"zh-Hant\",\n      \"ja\",\n      \"ko\",\n      \"vi\",\n    ];\n\n    let language = locale.split(\"-\")[0];\n\n    // Configure language fallbacks for simplified and traditional Chinese\n    if (\n      [\"zh\"].indexOf(language) >= 0 ||\n      [\"CN\"].indexOf(locale.split(\"-\")[1]) >= 0\n    ) {\n      language = \"zh-Hans\";\n    }\n    if ([\"TW\", \"HK\", \"SG\"].indexOf(locale.split(\"-\")[1]) >= 0) {\n      language = \"zh-Hant\";\n    }\n\n    let mapTextField;\n    if (supportedMapLanguages.indexOf(language) >= 0) {\n      mapTextField = [\"coalesce\", [\"get\", \"name_\" + language], [\"get\", \"name\"]];\n    } else {\n      mapTextField = [\"coalesce\", [\"get\", \"name_en\"], [\"get\", \"name\"]];\n    }\n\n    map.setLayoutProperty(\"country-label\", \"text-field\", mapTextField);\n    map.setLayoutProperty(\"settlement-minor-label\", \"text-field\", mapTextField);\n    map.setLayoutProperty(\"settlement-major-label\", \"text-field\", mapTextField);\n\n    // Add new boundary to the map\n\n    map.addLayer({\n      id: \"capital-location\",\n      type: \"circle\",\n      source: {\n        type: \"geojson\",\n        data: null,\n      },\n      paint: {\n        \"circle-radius\": 3,\n        \"circle-color\": \"hsla(355, 100%, 50%, 0.5)\",\n        \"circle-stroke-color\": \"white\",\n        \"circle-stroke-width\": 1,\n      },\n      layout: {},\n    });\n  }\n</script>\n\n<style>\n  div {\n    width: 60%;\n    height: 100%;\n    position: fixed;\n    right: 0;\n  }\n  @media (max-width: 1000px) {\n    div {\n      width: 100%;\n      height: 60%;\n      position: absolute;\n    }\n  }\n</style>\n\n<div id=\"map\" bind:this={container}>\n  {#if map}\n    <slot />\n  {/if}\n</div>\n",
    "<style>\n\tdiv {\n\t\tz-index: 2;\n\t\twidth: 40%;\n\t\tposition: absolute;\n\t}\n\t@media (max-width: 1000px) {\n\t\tdiv {\n\t\t\twidth: 100%;\n\t\t\ttop: 60%;\n\t\t}\n\t}\n\n</style>\n\n<div>\n\t<slot></slot>\n</div>"
  ],
  "names": [],
  "mappings": "AAyXE,KAAK,eAAC,CAAC,AACL,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC3B,CAAC;ACxOD,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,CAAC,AACV,CAAC,AACD,MAAM,AAAC,YAAY,MAAM,CAAC,AAAC,CAAC,AAC1B,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CACX,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACH,CAAC;AC9JF,GAAG,eAAC,CAAC,AACJ,OAAO,CAAE,CAAC,CACV,KAAK,CAAE,GAAG,CACV,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACD,MAAM,AAAC,YAAY,MAAM,CAAC,AAAC,CAAC,AAC3B,GAAG,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,GAAG,AACT,CAAC,AACF,CAAC"
}