{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Map.svelte",
    "Panel.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Map from \"./Map.svelte\";\n  import Panel from \"./Panel.svelte\";\n  import { getPlaces, getLocation, rndPlace, shuffle } from \"./utils.js\";\n\n  let map;\n  let mapstyle = \"mapbox://styles/mapbox/satellite-v9\";\n  let places;\n\n  let game = {\n    started: false,\n    turn: 0,\n    score: 0,\n    place: null,\n    places: null,\n    message: null,\n  };\n\n  // New turn. Randomly select a place + get its location\n  function nextTurn() {\n    if (!game.started) {\n      game.started = true;\n    }\n    let layerId = \"boundary\";\n\n    // Get a random place (right answer)\n    let place = rndPlace(places);\n    game.place = place;\n\n    // Create an array of possible answers\n    game.places = [];\n    game.places.push(place);\n    while (game.places.length < 3) {\n      let place = rndPlace(places);\n      if (!game.places.includes(place)) {\n        game.places.push(place);\n      }\n    }\n    game.places = shuffle(game.places);\n\n    // Get capital location\n    let boundary;\n    getLocation(place.capital).then((result) => {\n      // Update location circle\n      map.getSource(layerId).setData(result.geometry);\n\n      // Update boundary\n      let countryQid = place.country.value.replace(\n        \"http://www.wikidata.org/entity/\",\n        \"\"\n      );\n\n      map.setFilter(\"countries fill\", [\n        \"==\",\n        [\"get\", \"wikidata_id\"],\n        countryQid,\n      ]);\n      map.setFilter(\"countries outline\", [\n        \"==\",\n        [\"get\", \"wikidata_id\"],\n        countryQid,\n      ]);\n\n      map.setFeatureState(\n        {\n          source: \"countries\",\n          sourceLayer: \"country_boundaries\",\n          id: countryQid,\n        },\n        {\n          active: true,\n        }\n      );\n\n      // Fit map to boundary\n      map.easeTo({\n          center: result.geometry.coordinates,\n          zoom: 4,\n          duration: 1000,\n        });\n    });\n  }\n\n  // Check if chosen place is correct\n  function checkPlace(code) {\n    if (code == game.place.countryLabel.value) {\n      game.score += 1;\n      game.message = `You got it!`;\n    } else {\n      game.message = `Nope, the answer was ${game.place.countryLabel.value}`;\n    }\n    game.turn += 1;\n    game.place = null;\n    game.places = null;\n  }\n\n  // Get geography codes and names from API (initiation of app)\n  getPlaces().then((result) => {\n    places = result;\n  });\n</script>\n\n<style>\n  :global(body) {\n    margin: 0;\n    padding: 0;\n  }\n  main {\n    padding: 20px;\n  }\n  h1 {\n    margin-top: 1px;\n  }\n  .block {\n    display: block;\n    width: 100%;\n  }\n</style>\n\n<Panel>\n  <main>\n    <h1>Can you guess the country?</h1>\n    <h3>\n      Score\n      {game.score}\n      /\n      {game.turn}\n      {#if game.turn > 0}({Math.round((game.score / game.turn) * 100)}%){/if}\n    </h3>\n    {#if !game.started && places}\n      <button on:click={nextTurn}>Let's get started!</button>\n    {:else if game.places}\n      {#each game.places as place}\n        <button\n          class=\"block\"\n          on:click={checkPlace(place.countryLabel.value)}>{place.countryLabel.value}</button>\n      {/each}\n    {:else if game.message}\n      <h3>{game.message}</h3>\n      <button on:click={nextTurn}>Show me another!</button>\n    {/if}\n  </main>\n</Panel>\n\n<Map style={mapstyle} bind:map />\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import mapbox from \"mapbox-gl\";\n\n  export let location = {\n    bounds: [\n      [-10.76, 49.864],\n      [1.863, 59.479],\n    ], // Lebanon bounding box\n  };\n  export let style;\n\n  export let map;\n  let container;\n  let options;\n\n  function resetView() {\n    map.fitBounds(location.bounds);\n  }\n\n  if (location.bounds) {\n    options = { bounds: location.bounds };\n  } else if (location.lon && location.lat) {\n    options = {\n      center: [location.lon, location.lat],\n    };\n    if (location.zoom) {\n      options.zoom = location.zoom;\n    }\n  }\n\n  onMount(() => {\n    const link = document.createElement(\"link\");\n    link.rel = \"stylesheet\";\n    link.href = \"https://unpkg.com/mapbox-gl/dist/mapbox-gl.css\";\n\n    link.onload = () => {\n      mapbox.accessToken =\n        \"pk.eyJ1IjoicGxhbmVtYWQiLCJhIjoiemdYSVVLRSJ9.g3lbg_eN0kztmsfIPxa9MQ\";\n      map = new mapbox.Map({\n        container,\n        style: style,\n        interactive: true,\n        ...options,\n      });\n      // map.scrollZoom.disable();\n\n      map.on(\"load\", function () {\n        loadMapLayers();\n      });\n    };\n\n    document.head.appendChild(link);\n\n    return () => {\n      map.remove();\n      link.parentNode.removeChild(link);\n    };\n  });\n\n  function loadMapLayers() {\n    // Configure the worldview for the country boundaries tileset\n    const worldviewFilter = [\n      \"all\",\n      [\n        \"any\",\n        [\"in\", \"US\", [\"get\", \"worldview\"]],\n        [\"==\", \"all\", [\"get\", \"worldview\"]],\n      ],\n    ];\n\n    map.addSource(\"countries\", {\n      type: \"vector\",\n      url: \"mapbox://mapbox.country-boundaries-v1\",\n      promoteId: \"wikidata_id\",\n    });\n\n    map.addLayer({\n      id: \"countries fill\",\n      type: \"fill\",\n      source: \"countries\",\n      \"source-layer\": \"country_boundaries\",\n      layout: {},\n      paint: {\n        \"fill-color\": \"white\",\n        \"fill-opacity\": 0.1,\n      },\n      filter: worldviewFilter,\n    });\n\n    map.addLayer({\n      id: \"countries outline\",\n      type: \"line\",\n      source: \"countries\",\n      \"source-layer\": \"country_boundaries\",\n      layout: {},\n      paint: {\n        \"line-color\": \"white\",\n        \"line-width\": 2,\n      },\n      filter: worldviewFilter,\n    });\n\n    // Add new boundary to the map\n\n    map.addLayer({\n      id: \"boundary\",\n      type: \"circle\",\n      source: {\n        type: \"geojson\",\n        data: null,\n      },\n      paint: {\n        \"circle-color\": \"white\",\n        \"circle-stroke-color\": \"white\",\n        \"circle-stroke-width\": 2,\n        \"circle-opacity\": 0.5,\n      },\n      layout: {},\n    });\n  }\n</script>\n\n<style>\n  div {\n    width: 60%;\n    height: 100%;\n    position: fixed;\n    right: 0;\n  }\n  @media (max-width: 600px) {\n    div {\n      width: 100%;\n      height: 75%;\n      position: absolute;\n    }\n  }\n</style>\n\n<div bind:this={container}>\n  {#if map}\n    <slot />\n  {/if}\n</div>\n",
    "<style>\n\tdiv {\n\t\tz-index: 2;\n\t\twidth: 40%;\n\t\tposition: absolute;\n\t}\n\t@media (max-width: 600px) {\n\t\tdiv {\n\t\t\twidth: 100%;\n\t\t\ttop: 75%;\n\t\t}\n\t}\n</style>\n\n<div>\n\t<slot></slot>\n</div>"
  ],
  "names": [],
  "mappings": "AAuGU,IAAI,AAAE,CAAC,AACb,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,IAAI,AACf,CAAC,AACD,EAAE,cAAC,CAAC,AACF,UAAU,CAAE,GAAG,AACjB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,AACb,CAAC;ACQD,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,CAAC,AACV,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CACX,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACH,CAAC;ACvIF,GAAG,eAAC,CAAC,AACJ,OAAO,CAAE,CAAC,CACV,KAAK,CAAE,GAAG,CACV,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,GAAG,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,GAAG,AACT,CAAC,AACF,CAAC"
}