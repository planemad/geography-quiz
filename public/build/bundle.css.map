{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Map.svelte",
    "Panel.svelte"
  ],
  "sourcesContent": [
    "<Panel>\n\t<main>\n\t\t<h1>Can you guess the country?</h1>\n\t\t<h3>Score {game.score} / {game.turn} {#if game.turn > 0}({Math.round((game.score / game.turn) * 100)}%){/if}</h3>\n\t\t{#if !game.started && places}\n\t  \t<button on:click={nextTurn}>Let's get started!</button>\n\t\t{:else if game.places}\n\t\t{#each game.places as place}\n\t  \t<button class=\"block\" on:click={checkPlace(place.countryLabel.value)}>{place.countryLabel.value}</button>\n\t\t{/each}\n\t\t{:else if game.message}\n\t\t\t<h3>{game.message}</h3>\n\t\t\t<button on:click={nextTurn}>Show me another!</button>\n\t\t{/if}\n\t</main>\n</Panel>\n\n<Map style={mapstyle} bind:map={map} />\n\n<script>\n\timport Map from './Map.svelte';\n\timport Panel from './Panel.svelte';\n\timport { getPlaces, getLocation, rndPlace, shuffle } from './utils.js';\n\t\n\tlet map;\n\tlet mapstyle = 'mapbox://styles/mapbox/satellite-v9';\n\tlet places;\n\t\n\tlet game = {\n\t\tstarted: false,\n\t\tturn: 0,\n\t\tscore: 0,\n\t\tplace: null,\n\t\tplaces: null,\n\t\tmessage: null\n\t}\n\t\n\t// New turn. Randomly select a place + get its location\n\tfunction nextTurn() {\n\t\tif (!game.started) { game.started = true };\n\t\tlet layerId = 'boundary';\n\t\t\n\t\t// Get a random place (right answer)\n\t\tlet place = rndPlace(places);\n\t\tgame.place = place;\n\t\t\n\t\t// Create an array of possible answers\n\t\tgame.places = [];\n\t\tgame.places.push(place);\n\t\twhile (game.places.length < 3) {\n\t\t\tlet place = rndPlace(places);\n\t\t\tif (!game.places.includes(place)) {\n\t\t\t\tgame.places.push(place);\n\t\t\t}\n\t\t}\n\t\tgame.places = shuffle(game.places);\n\t\t\n\t\t// Get capital location\n\t\tlet boundary;\n\t\tgetLocation(place.capital)\n\t\t.then(result => {\n\t\t\t\n\t\t\t// Update location circle\n\t\t\tmap.getSource(layerId).setData(result.geometry)\n\n\t\t\t// Update boundary\n\t\t\tlet countryQid = place.country.value.replace('http://www.wikidata.org/entity/','');\n\n\t\t\tmap.setFilter('countries fill',[\"==\",[\"get\",\"wikidata_id\"], countryQid])\n\t\t\tmap.setFilter('countries outline',[\"==\",[\"get\",\"wikidata_id\"], countryQid])\n\n\t\t\tmap.setFeatureState({\n          'source': 'countries',\n          'sourceLayer': 'country_boundaries',\n          id: countryQid\n        }, {\n          active: true\n        });\n\n\t\t\t// Fit map to boundary\n\t\t\tmap.panTo(result.geometry.coordinates, {zoom:14})\n\t\t\tsetTimeout(function(){ map.easeTo({zoom:4, duration:7000}); }, 5000);\n\n\t\t});\n\t}\n\t\n\t// Check if chosen place is correct\n\tfunction checkPlace(code) {\n\t\tif (code == game.place.countryLabel.value) {\n\t\t\tgame.score += 1;\n\t\t\tgame.message = `You got it!`;\n\t\t} else {\n\t\t\tgame.message = `Nope, the answer was ${game.place.countryLabel.value}`;\n\t\t}\n\t\tgame.turn += 1;\n\t\tgame.place = null;\n\t\tgame.places = null;\n\t}\n\t\n\t// Get geography codes and names from API (initiation of app)\n\tgetPlaces().then(result => { places = result; })\n\t\n</script>\n\n<style>\n\t:global(body) {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t}\n\tmain {\n\t\tpadding: 20px;\n\t}\n\th1 {\n\t\tmargin-top: 1px;\n\t}\n\t.block {\n\t\tdisplay: block;\n\t\twidth: 100%;\n\t}\n</style>\n\n",
    "<script>\n\timport { onMount } from 'svelte';\n\timport mapbox from 'mapbox-gl';\n\t\n\texport let location = {\n\t\tbounds: [[-10.760, 49.864], [1.863, 59.479]] // Lebanon bounding box\n\t};\n\texport let style;\n\t\n\texport let map;\n\tlet container;\n\tlet options;\n\t\n\tfunction resetView() {\n\t\tmap.fitBounds(location.bounds);\n\t}\n\t\n\tif (location.bounds) {\n\t\toptions = { bounds: location.bounds };\n\t} else if (location.lon && location.lat) {\n\t\toptions = {\n\t\t\tcenter: [location.lon, location.lat]\n\t\t}\n\t\tif (location.zoom) {\n\t\t\toptions.zoom = location.zoom;\n\t\t}\n\t};\n\n\tonMount(() => {\n\t\tconst link = document.createElement('link');\n\t\tlink.rel = 'stylesheet';\n\t\tlink.href = 'https://unpkg.com/mapbox-gl/dist/mapbox-gl.css';\n\n\t\tlink.onload = () => {\n\t\t\tmapbox.accessToken = 'pk.eyJ1IjoicGxhbmVtYWQiLCJhIjoiemdYSVVLRSJ9.g3lbg_eN0kztmsfIPxa9MQ';\n\t\t\tmap = new mapbox.Map({\n\t\t\t\tcontainer,\n\t\t\t\tstyle: style,\n\t\t\t\tinteractive: true,\n\t\t\t\t...options\n\t\t\t});\n\t\t\t// map.scrollZoom.disable();\n\n\t\t\tmap.on('load', function () {\n\n\t\t\t\tloadMapLayers();\n\n\t\t\t})\n\t\t\t\n\t\t};\n\n\t\tdocument.head.appendChild(link);\n\n\t\treturn () => {\n\t\t\tmap.remove();\n\t\t\tlink.parentNode.removeChild(link);\n\t\t};\n\t});\n\n\tfunction loadMapLayers(){\n\n\t\t  // Configure the worldview for the country boundaries tileset\n\t\t  const worldviewFilter=[\n      \"all\", [\n        \"any\",\n        [\n          \"in\",\n          \"US\",\n          [\"get\", \"worldview\"]\n        ],\n        [\n          \"==\",\n          \"all\",\n          [\"get\", \"worldview\"]\n        ]\n      ]\n    ]\n\n\t\tmap.addSource('countries', {\n    type: 'vector',\n    url: 'mapbox://mapbox.country-boundaries-v1',\n    promoteId: 'wikidata_id'\n  });\n\n  map.addLayer({\n    'id': 'countries fill',\n    'type': 'fill',\n    'source': 'countries',\n    'source-layer': 'country_boundaries',\n    'layout': {},\n    'paint': {\n\t\t'fill-color':'white',\n\t\t'fill-opacity':0.1\n    },\n    'filter': worldviewFilter\n  });\n\n  map.addLayer({\n    'id': 'countries outline',\n    'type': 'line',\n    'source': 'countries',\n    'source-layer': 'country_boundaries',\n    'layout': {},\n    'paint': {\n\t\t'line-color':'white',\n\t\t'line-width':2\n    },\n    'filter': worldviewFilter\n  });\n\n  \t\t\t// Add new boundary to the map\n\n\t\t\tmap.addLayer({\n\t\t\t\t'id': 'boundary',\n\t\t\t\t'type': 'circle',\n\t\t\t\t'source': {\n\t\t\t\t'type': 'geojson',\n\t\t\t\t'data': null\n\t\t\t},\n\t\t\t\t'paint': {\n\t\t'circle-color':'white',\n\t\t'circle-stroke-color':'white',\n\t\t'circle-stroke-width':2,\n      'circle-opacity': 0.5\n    },\n\t\t\t\t'layout': {}\n\t\t\t});\n\n\t}\n</script>\n\n<style>\n\tdiv {\n\t\twidth: 60%;\n\t\theight: 100%;\n\t\tposition: fixed;\n\t\tright: 0;\n\t}\n\t@media (max-width: 600px) {\n\t\tdiv {\n\t\t\twidth: 100%;\n\t\t\theight: 75%;\n\t\t\tposition: absolute;\n\t\t}\n\t}\n</style>\n\n<div bind:this={container}>\n\t{#if map}\n\t\t<slot></slot>\n\t{/if}\n</div>",
    "<style>\n\tdiv {\n\t\tz-index: 2;\n\t\twidth: 40%;\n\t\tposition: absolute;\n\t}\n\t@media (max-width: 600px) {\n\t\tdiv {\n\t\t\twidth: 100%;\n\t\t\ttop: 75%;\n\t\t}\n\t}\n</style>\n\n<div>\n\t<slot></slot>\n</div>"
  ],
  "names": [],
  "mappings": "AAyGS,IAAI,AAAE,CAAC,AACd,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACX,CAAC,AACD,IAAI,eAAC,CAAC,AACL,OAAO,CAAE,IAAI,AACd,CAAC,AACD,EAAE,eAAC,CAAC,AACH,UAAU,CAAE,GAAG,AAChB,CAAC,AACD,MAAM,eAAC,CAAC,AACP,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,AACZ,CAAC;ACcD,GAAG,cAAC,CAAC,AACJ,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,KAAK,CACf,KAAK,CAAE,CAAC,AACT,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,GAAG,cAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,GAAG,CACX,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACF,CAAC;AC/ID,GAAG,eAAC,CAAC,AACJ,OAAO,CAAE,CAAC,CACV,KAAK,CAAE,GAAG,CACV,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,GAAG,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,GAAG,CAAE,GAAG,AACT,CAAC,AACF,CAAC"
}